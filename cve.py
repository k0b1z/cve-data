import json
from datetime import datetime
from datetime import timedelta

from slack import WebClient
from slack.errors import SlackApiError

import requests

import os
from dotenv import load_dotenv

load_dotenv()

slack_token = os.getenv('SLACK_TOKEN')
client = WebClient(token=slack_token)

startDate = datetime.now()
pubStartDate = startDate.strftime("%Y-%m-%dT%H:%M:%S:000 UTC-03:00")

endDate = startDate + timedelta(minutes = 1)
pubEndDate = endDate.strftime("%Y-%m-%dT%H:%M:%S:000 UTC-03:00")

response = requests.get('https://services.nvd.nist.gov/rest/json/cves/1.0/?resultsPerPage=2000&pubStartDate=' + pubStartDate + '&pubEndDate=' + pubEndDate)

cve = response.json()

for item in cve['result']['CVE_Items']:
    # Ideia para ElasticSearch, aramazenar os jsons em um arquivo
    #arquivo.write(json.dumps(item))
    #arquivo.write("\n\n")

    if item['impact']:
        if item['impact']['baseMetricV3']['cvssV3']['baseSeverity'] == 'HIGH':
            #print(item['impact']['baseMetricV3']['cvssV3']['baseSeverity'])
            for name in item['cve']['references']['reference_data']:
                url = name['url']
            
            for desc in item['cve']['description']['description_data']:
                description = desc['value']

            date_time_pub = datetime.strptime(item['publishedDate'], '%Y-%m-%dT%H:%MZ')

            if date_time_pub.date() == datetime.today().date():
                client.chat_postMessage(
                channel=os.getenv('SLACK_CHANNEL'),
                blocks = [
                    {
                        "type": "header",
                        "text": {
                            "type": "plain_text",
                            "text": "CVE-Alerts"
                        }
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*CVE:*\n" + item['cve']['CVE_data_meta']['ID']
                            },
                            {
                                "type": "mrkdwn",
                                "text": "*Published Date:*\n" + item['publishedDate']
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "fields": [
                            {
                                "type": "mrkdwn",
                                "text": "*Score*\n" + json.dumps(item['impact']['baseMetricV3']['cvssV3']['baseScore'])
                            },
                            {
                                "type": "mrkdwn",
                                "text": "*Severity*\n" +  item['impact']['baseMetricV3']['cvssV3']['baseSeverity']
                            }
                        ]
                    },
                    {
                        "type": "section",
                        "text": {
                                "type": "mrkdwn",
                                "text": "*Description*\n" + description
                            }
                    },
                    {
                        "type": "section",
                        "text": {
                                "type": "mrkdwn",
                                "text": "*Reference*\n<" + url + "|Vulnerability>"
                        }
                    }
                ])